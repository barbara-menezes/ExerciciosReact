{"ast":null,"code":"import globalState from '../globalState.js';\nimport privateProps from '../privateProps.js';\nimport privateMethods from '../privateMethods.js';\nexport function _destroy() {\n  const domCache = privateProps.domCache.get(this);\n  const innerParams = privateProps.innerParams.get(this);\n\n  if (!innerParams) {\n    return; // This instance has already been destroyed\n  } // Check if there is another Swal closing\n\n\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback();\n    delete globalState.swalCloseEventFinishedCallback;\n  } // Check if there is a swal disposal defer timer\n\n\n  if (globalState.deferDisposalTimer) {\n    clearTimeout(globalState.deferDisposalTimer);\n    delete globalState.deferDisposalTimer;\n  }\n\n  if (typeof innerParams.onDestroy === 'function') {\n    innerParams.onDestroy();\n  }\n\n  disposeSwal(this);\n}\n\nconst disposeSwal = instance => {\n  // Unset this.params so GC will dispose it (#1569)\n  delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)\n\n  delete globalState.keydownHandler;\n  delete globalState.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)\n\n  unsetWeakMaps(privateProps);\n  unsetWeakMaps(privateMethods);\n};\n\nconst unsetWeakMaps = obj => {\n  for (const i in obj) {\n    obj[i] = new WeakMap();\n  }\n};","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/instanceMethods/_destroy.js"],"names":["globalState","privateProps","privateMethods","_destroy","domCache","get","innerParams","popup","swalCloseEventFinishedCallback","deferDisposalTimer","clearTimeout","onDestroy","disposeSwal","instance","params","keydownHandler","keydownTarget","unsetWeakMaps","obj","i","WeakMap"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AAEA,OAAO,SAASC,QAAT,GAAqB;AAC1B,QAAMC,QAAQ,GAAGH,YAAY,CAACG,QAAb,CAAsBC,GAAtB,CAA0B,IAA1B,CAAjB;AACA,QAAMC,WAAW,GAAGL,YAAY,CAACK,WAAb,CAAyBD,GAAzB,CAA6B,IAA7B,CAApB;;AAEA,MAAI,CAACC,WAAL,EAAkB;AAChB,WADgB,CACT;AACR,GANyB,CAQ1B;;;AACA,MAAIF,QAAQ,CAACG,KAAT,IAAkBP,WAAW,CAACQ,8BAAlC,EAAkE;AAChER,IAAAA,WAAW,CAACQ,8BAAZ;AACA,WAAOR,WAAW,CAACQ,8BAAnB;AACD,GAZyB,CAc1B;;;AACA,MAAIR,WAAW,CAACS,kBAAhB,EAAoC;AAClCC,IAAAA,YAAY,CAACV,WAAW,CAACS,kBAAb,CAAZ;AACA,WAAOT,WAAW,CAACS,kBAAnB;AACD;;AAED,MAAI,OAAOH,WAAW,CAACK,SAAnB,KAAiC,UAArC,EAAiD;AAC/CL,IAAAA,WAAW,CAACK,SAAZ;AACD;;AACDC,EAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,MAAMA,WAAW,GAAIC,QAAD,IAAc;AAChC;AACA,SAAOA,QAAQ,CAACC,MAAhB,CAFgC,CAGhC;;AACA,SAAOd,WAAW,CAACe,cAAnB;AACA,SAAOf,WAAW,CAACgB,aAAnB,CALgC,CAMhC;;AACAC,EAAAA,aAAa,CAAChB,YAAD,CAAb;AACAgB,EAAAA,aAAa,CAACf,cAAD,CAAb;AACD,CATD;;AAWA,MAAMe,aAAa,GAAIC,GAAD,IAAS;AAC7B,OAAK,MAAMC,CAAX,IAAgBD,GAAhB,EAAqB;AACnBA,IAAAA,GAAG,CAACC,CAAD,CAAH,GAAS,IAAIC,OAAJ,EAAT;AACD;AACF,CAJD","sourcesContent":["import globalState from '../globalState.js'\nimport privateProps from '../privateProps.js'\nimport privateMethods from '../privateMethods.js'\n\nexport function _destroy () {\n  const domCache = privateProps.domCache.get(this)\n  const innerParams = privateProps.innerParams.get(this)\n\n  if (!innerParams) {\n    return // This instance has already been destroyed\n  }\n\n  // Check if there is another Swal closing\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback()\n    delete globalState.swalCloseEventFinishedCallback\n  }\n\n  // Check if there is a swal disposal defer timer\n  if (globalState.deferDisposalTimer) {\n    clearTimeout(globalState.deferDisposalTimer)\n    delete globalState.deferDisposalTimer\n  }\n\n  if (typeof innerParams.onDestroy === 'function') {\n    innerParams.onDestroy()\n  }\n  disposeSwal(this)\n}\n\nconst disposeSwal = (instance) => {\n  // Unset this.params so GC will dispose it (#1569)\n  delete instance.params\n  // Unset globalState props so GC will dispose globalState (#1569)\n  delete globalState.keydownHandler\n  delete globalState.keydownTarget\n  // Unset WeakMaps so GC will be able to dispose them (#1569)\n  unsetWeakMaps(privateProps)\n  unsetWeakMaps(privateMethods)\n}\n\nconst unsetWeakMaps = (obj) => {\n  for (const i in obj) {\n    obj[i] = new WeakMap()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}