{"ast":null,"code":"import { warn, callIfFunction } from './utils.js';\nimport * as dom from './dom/index.js';\nimport defaultInputValidators from './defaultInputValidators.js';\n\nfunction setDefaultInputValidators(params) {\n  // Use default `inputValidator` for supported input types if not provided\n  if (!params.inputValidator) {\n    Object.keys(defaultInputValidators).forEach(key => {\n      if (params.input === key) {\n        params.inputValidator = defaultInputValidators[key];\n      }\n    });\n  }\n}\n\nfunction validateCustomTargetElement(params) {\n  // Determine if the custom target element is valid\n  if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {\n    warn('Target parameter is not valid, defaulting to \"body\"');\n    params.target = 'body';\n  }\n}\n/**\n * Set type, text and actions on popup\n *\n * @param params\n * @returns {boolean}\n */\n\n\nexport default function setParameters(params) {\n  setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm\n\n  if (params.showLoaderOnConfirm && !params.preConfirm) {\n    warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' + 'https://sweetalert2.github.io/#ajax-request');\n  } // params.animation will be actually used in renderPopup.js\n  // but in case when params.animation is a function, we need to call that function\n  // before popup (re)initialization, so it'll be possible to check Swal.isVisible()\n  // inside the params.animation function\n\n\n  params.animation = callIfFunction(params.animation);\n  validateCustomTargetElement(params); // Replace newlines with <br> in title\n\n  if (typeof params.title === 'string') {\n    params.title = params.title.split('\\n').join('<br />');\n  }\n\n  dom.init(params);\n}","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/utils/setParameters.js"],"names":["warn","callIfFunction","dom","defaultInputValidators","setDefaultInputValidators","params","inputValidator","Object","keys","forEach","key","input","validateCustomTargetElement","target","document","querySelector","appendChild","setParameters","showLoaderOnConfirm","preConfirm","animation","title","split","join","init"],"mappings":"AAAA,SAASA,IAAT,EAAeC,cAAf,QAAqC,YAArC;AACA,OAAO,KAAKC,GAAZ,MAAqB,gBAArB;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;;AAEA,SAASC,yBAAT,CAAoCC,MAApC,EAA4C;AAC1C;AACA,MAAI,CAACA,MAAM,CAACC,cAAZ,EAA4B;AAC1BC,IAAAA,MAAM,CAACC,IAAP,CAAYL,sBAAZ,EAAoCM,OAApC,CAA6CC,GAAD,IAAS;AACnD,UAAIL,MAAM,CAACM,KAAP,KAAiBD,GAArB,EAA0B;AACxBL,QAAAA,MAAM,CAACC,cAAP,GAAwBH,sBAAsB,CAACO,GAAD,CAA9C;AACD;AACF,KAJD;AAKD;AACF;;AAED,SAASE,2BAAT,CAAsCP,MAAtC,EAA8C;AAC5C;AACA,MACE,CAACA,MAAM,CAACQ,MAAR,IACC,OAAOR,MAAM,CAACQ,MAAd,KAAyB,QAAzB,IAAqC,CAACC,QAAQ,CAACC,aAAT,CAAuBV,MAAM,CAACQ,MAA9B,CADvC,IAEC,OAAOR,MAAM,CAACQ,MAAd,KAAyB,QAAzB,IAAqC,CAACR,MAAM,CAACQ,MAAP,CAAcG,WAHvD,EAIE;AACAhB,IAAAA,IAAI,CAAC,qDAAD,CAAJ;AACAK,IAAAA,MAAM,CAACQ,MAAP,GAAgB,MAAhB;AACD;AACF;AAED;;;;;;;;AAMA,eAAe,SAASI,aAAT,CAAwBZ,MAAxB,EAAgC;AAC7CD,EAAAA,yBAAyB,CAACC,MAAD,CAAzB,CAD6C,CAG7C;;AACA,MAAIA,MAAM,CAACa,mBAAP,IAA8B,CAACb,MAAM,CAACc,UAA1C,EAAsD;AACpDnB,IAAAA,IAAI,CACF,yEACA,mFADA,GAEA,6CAHE,CAAJ;AAKD,GAV4C,CAY7C;AACA;AACA;AACA;;;AACAK,EAAAA,MAAM,CAACe,SAAP,GAAmBnB,cAAc,CAACI,MAAM,CAACe,SAAR,CAAjC;AAEAR,EAAAA,2BAA2B,CAACP,MAAD,CAA3B,CAlB6C,CAoB7C;;AACA,MAAI,OAAOA,MAAM,CAACgB,KAAd,KAAwB,QAA5B,EAAsC;AACpChB,IAAAA,MAAM,CAACgB,KAAP,GAAehB,MAAM,CAACgB,KAAP,CAAaC,KAAb,CAAmB,IAAnB,EAAyBC,IAAzB,CAA8B,QAA9B,CAAf;AACD;;AAEDrB,EAAAA,GAAG,CAACsB,IAAJ,CAASnB,MAAT;AACD","sourcesContent":["import { warn, callIfFunction } from './utils.js'\nimport * as dom from './dom/index.js'\nimport defaultInputValidators from './defaultInputValidators.js'\n\nfunction setDefaultInputValidators (params) {\n  // Use default `inputValidator` for supported input types if not provided\n  if (!params.inputValidator) {\n    Object.keys(defaultInputValidators).forEach((key) => {\n      if (params.input === key) {\n        params.inputValidator = defaultInputValidators[key]\n      }\n    })\n  }\n}\n\nfunction validateCustomTargetElement (params) {\n  // Determine if the custom target element is valid\n  if (\n    !params.target ||\n    (typeof params.target === 'string' && !document.querySelector(params.target)) ||\n    (typeof params.target !== 'string' && !params.target.appendChild)\n  ) {\n    warn('Target parameter is not valid, defaulting to \"body\"')\n    params.target = 'body'\n  }\n}\n\n/**\n * Set type, text and actions on popup\n *\n * @param params\n * @returns {boolean}\n */\nexport default function setParameters (params) {\n  setDefaultInputValidators(params)\n\n  // showLoaderOnConfirm && preConfirm\n  if (params.showLoaderOnConfirm && !params.preConfirm) {\n    warn(\n      'showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' +\n      'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' +\n      'https://sweetalert2.github.io/#ajax-request'\n    )\n  }\n\n  // params.animation will be actually used in renderPopup.js\n  // but in case when params.animation is a function, we need to call that function\n  // before popup (re)initialization, so it'll be possible to check Swal.isVisible()\n  // inside the params.animation function\n  params.animation = callIfFunction(params.animation)\n\n  validateCustomTargetElement(params)\n\n  // Replace newlines with <br> in title\n  if (typeof params.title === 'string') {\n    params.title = params.title.split('\\n').join('<br />')\n  }\n\n  dom.init(params)\n}\n"]},"metadata":{},"sourceType":"module"}