{"ast":null,"code":"import * as dom from '../../src/utils/dom/index.js';\nimport { warn } from '../../src/utils/utils.js';\nimport sweetAlert from '../sweetalert2.js';\nimport privateProps from '../privateProps.js';\n/**\n * Updates popup parameters.\n */\n\nexport function update(params) {\n  const popup = dom.getPopup();\n  const innerParams = privateProps.innerParams.get(this);\n\n  if (!popup || dom.hasClass(popup, innerParams.hideClass.popup)) {\n    return warn(`You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.`);\n  }\n\n  const validUpdatableParams = {}; // assign valid params from `params` to `defaults`\n\n  Object.keys(params).forEach(param => {\n    if (sweetAlert.isUpdatableParameter(param)) {\n      validUpdatableParams[param] = params[param];\n    } else {\n      warn(`Invalid parameter to update: \"${param}\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js`);\n    }\n  });\n  const updatedParams = Object.assign({}, innerParams, validUpdatableParams);\n  dom.render(this, updatedParams);\n  privateProps.innerParams.set(this, updatedParams);\n  Object.defineProperties(this, {\n    params: {\n      value: Object.assign({}, this.params, params),\n      writable: false,\n      enumerable: true\n    }\n  });\n}","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/instanceMethods/update.js"],"names":["dom","warn","sweetAlert","privateProps","update","params","popup","getPopup","innerParams","get","hasClass","hideClass","validUpdatableParams","Object","keys","forEach","param","isUpdatableParameter","updatedParams","assign","render","set","defineProperties","value","writable","enumerable"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,8BAArB;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AAEA;;;;AAGA,OAAO,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AAC9B,QAAMC,KAAK,GAAGN,GAAG,CAACO,QAAJ,EAAd;AACA,QAAMC,WAAW,GAAGL,YAAY,CAACK,WAAb,CAAyBC,GAAzB,CAA6B,IAA7B,CAApB;;AAEA,MAAI,CAACH,KAAD,IAAUN,GAAG,CAACU,QAAJ,CAAaJ,KAAb,EAAoBE,WAAW,CAACG,SAAZ,CAAsBL,KAA1C,CAAd,EAAgE;AAC9D,WAAOL,IAAI,CAAE,4IAAF,CAAX;AACD;;AAED,QAAMW,oBAAoB,GAAG,EAA7B,CAR8B,CAU9B;;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,OAApB,CAA4BC,KAAK,IAAI;AACnC,QAAId,UAAU,CAACe,oBAAX,CAAgCD,KAAhC,CAAJ,EAA4C;AAC1CJ,MAAAA,oBAAoB,CAACI,KAAD,CAApB,GAA8BX,MAAM,CAACW,KAAD,CAApC;AACD,KAFD,MAEO;AACLf,MAAAA,IAAI,CAAE,iCAAgCe,KAAM,iHAAxC,CAAJ;AACD;AACF,GAND;AAQA,QAAME,aAAa,GAAGL,MAAM,CAACM,MAAP,CAAc,EAAd,EAAkBX,WAAlB,EAA+BI,oBAA/B,CAAtB;AAEAZ,EAAAA,GAAG,CAACoB,MAAJ,CAAW,IAAX,EAAiBF,aAAjB;AAEAf,EAAAA,YAAY,CAACK,WAAb,CAAyBa,GAAzB,CAA6B,IAA7B,EAAmCH,aAAnC;AACAL,EAAAA,MAAM,CAACS,gBAAP,CAAwB,IAAxB,EAA8B;AAC5BjB,IAAAA,MAAM,EAAE;AACNkB,MAAAA,KAAK,EAAEV,MAAM,CAACM,MAAP,CAAc,EAAd,EAAkB,KAAKd,MAAvB,EAA+BA,MAA/B,CADD;AAENmB,MAAAA,QAAQ,EAAE,KAFJ;AAGNC,MAAAA,UAAU,EAAE;AAHN;AADoB,GAA9B;AAOD","sourcesContent":["import * as dom from '../../src/utils/dom/index.js'\nimport { warn } from '../../src/utils/utils.js'\nimport sweetAlert from '../sweetalert2.js'\nimport privateProps from '../privateProps.js'\n\n/**\n * Updates popup parameters.\n */\nexport function update (params) {\n  const popup = dom.getPopup()\n  const innerParams = privateProps.innerParams.get(this)\n\n  if (!popup || dom.hasClass(popup, innerParams.hideClass.popup)) {\n    return warn(`You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.`)\n  }\n\n  const validUpdatableParams = {}\n\n  // assign valid params from `params` to `defaults`\n  Object.keys(params).forEach(param => {\n    if (sweetAlert.isUpdatableParameter(param)) {\n      validUpdatableParams[param] = params[param]\n    } else {\n      warn(`Invalid parameter to update: \"${param}\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js`)\n    }\n  })\n\n  const updatedParams = Object.assign({}, innerParams, validUpdatableParams)\n\n  dom.render(this, updatedParams)\n\n  privateProps.innerParams.set(this, updatedParams)\n  Object.defineProperties(this, {\n    params: {\n      value: Object.assign({}, this.params, params),\n      writable: false,\n      enumerable: true\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}