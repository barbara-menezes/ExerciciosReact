{"ast":null,"code":"import * as dom from '../utils/dom/index.js';\nimport { DismissReason } from '../utils/DismissReason.js';\nimport { callIfFunction } from '../utils/utils.js';\nimport { clickConfirm } from '../staticMethods/dom.js';\nimport privateProps from '../privateProps.js';\nexport const addKeydownHandler = (instance, globalState, innerParams, dismissWith) => {\n  if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\n    globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n      capture: globalState.keydownListenerCapture\n    });\n    globalState.keydownHandlerAdded = false;\n  }\n\n  if (!innerParams.toast) {\n    globalState.keydownHandler = e => keydownHandler(instance, e, dismissWith);\n\n    globalState.keydownTarget = innerParams.keydownListenerCapture ? window : dom.getPopup();\n    globalState.keydownListenerCapture = innerParams.keydownListenerCapture;\n    globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {\n      capture: globalState.keydownListenerCapture\n    });\n    globalState.keydownHandlerAdded = true;\n  }\n}; // Focus handling\n\nexport const setFocus = (innerParams, index, increment) => {\n  const focusableElements = dom.getFocusableElements(); // search for visible elements and select the next possible match\n\n  for (let i = 0; i < focusableElements.length; i++) {\n    index = index + increment; // rollover to first item\n\n    if (index === focusableElements.length) {\n      index = 0; // go to last item\n    } else if (index === -1) {\n      index = focusableElements.length - 1;\n    }\n\n    return focusableElements[index].focus();\n  } // no visible focusable elements, focus the popup\n\n\n  dom.getPopup().focus();\n};\nconst arrowKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Left', 'Right', 'Up', 'Down' // IE11\n];\nconst escKeys = ['Escape', 'Esc' // IE11\n];\n\nconst keydownHandler = (instance, e, dismissWith) => {\n  const innerParams = privateProps.innerParams.get(instance);\n\n  if (innerParams.stopKeydownPropagation) {\n    e.stopPropagation();\n  } // ENTER\n\n\n  if (e.key === 'Enter') {\n    handleEnter(instance, e, innerParams); // TAB\n  } else if (e.key === 'Tab') {\n    handleTab(e, innerParams); // ARROWS - switch focus between buttons\n  } else if (arrowKeys.includes(e.key)) {\n    handleArrows(); // ESC\n  } else if (escKeys.includes(e.key)) {\n    handleEsc(e, innerParams, dismissWith);\n  }\n};\n\nconst handleEnter = (instance, e, innerParams) => {\n  // #720 #721\n  if (e.isComposing) {\n    return;\n  }\n\n  if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {\n    if (['textarea', 'file'].includes(innerParams.input)) {\n      return; // do not submit\n    }\n\n    clickConfirm();\n    e.preventDefault();\n  }\n};\n\nconst handleTab = (e, innerParams) => {\n  const targetElement = e.target;\n  const focusableElements = dom.getFocusableElements();\n  let btnIndex = -1;\n\n  for (let i = 0; i < focusableElements.length; i++) {\n    if (targetElement === focusableElements[i]) {\n      btnIndex = i;\n      break;\n    }\n  }\n\n  if (!e.shiftKey) {\n    // Cycle to the next button\n    setFocus(innerParams, btnIndex, 1);\n  } else {\n    // Cycle to the prev button\n    setFocus(innerParams, btnIndex, -1);\n  }\n\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nconst handleArrows = () => {\n  const confirmButton = dom.getConfirmButton();\n  const cancelButton = dom.getCancelButton(); // focus Cancel button if Confirm button is currently focused\n\n  if (document.activeElement === confirmButton && dom.isVisible(cancelButton)) {\n    cancelButton.focus(); // and vice versa\n  } else if (document.activeElement === cancelButton && dom.isVisible(confirmButton)) {\n    confirmButton.focus();\n  }\n};\n\nconst handleEsc = (e, innerParams, dismissWith) => {\n  if (callIfFunction(innerParams.allowEscapeKey)) {\n    e.preventDefault();\n    dismissWith(DismissReason.esc);\n  }\n};","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/instanceMethods/keydown-handler.js"],"names":["dom","DismissReason","callIfFunction","clickConfirm","privateProps","addKeydownHandler","instance","globalState","innerParams","dismissWith","keydownTarget","keydownHandlerAdded","removeEventListener","keydownHandler","capture","keydownListenerCapture","toast","e","window","getPopup","addEventListener","setFocus","index","increment","focusableElements","getFocusableElements","i","length","focus","arrowKeys","escKeys","get","stopKeydownPropagation","stopPropagation","key","handleEnter","handleTab","includes","handleArrows","handleEsc","isComposing","target","getInput","outerHTML","input","preventDefault","targetElement","btnIndex","shiftKey","confirmButton","getConfirmButton","cancelButton","getCancelButton","document","activeElement","isVisible","allowEscapeKey","esc"],"mappings":"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","sourcesContent":["import * as dom from '../utils/dom/index.js'\nimport { DismissReason } from '../utils/DismissReason.js'\nimport { callIfFunction } from '../utils/utils.js'\nimport { clickConfirm } from '../staticMethods/dom.js'\nimport privateProps from '../privateProps.js'\n\nexport const addKeydownHandler = (instance, globalState, innerParams, dismissWith) => {\n  if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\n    globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, { capture: globalState.keydownListenerCapture })\n    globalState.keydownHandlerAdded = false\n  }\n\n  if (!innerParams.toast) {\n    globalState.keydownHandler = (e) => keydownHandler(instance, e, dismissWith)\n    globalState.keydownTarget = innerParams.keydownListenerCapture ? window : dom.getPopup()\n    globalState.keydownListenerCapture = innerParams.keydownListenerCapture\n    globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, { capture: globalState.keydownListenerCapture })\n    globalState.keydownHandlerAdded = true\n  }\n}\n\n// Focus handling\nexport const setFocus = (innerParams, index, increment) => {\n  const focusableElements = dom.getFocusableElements()\n  // search for visible elements and select the next possible match\n  for (let i = 0; i < focusableElements.length; i++) {\n    index = index + increment\n\n    // rollover to first item\n    if (index === focusableElements.length) {\n      index = 0\n\n      // go to last item\n    } else if (index === -1) {\n      index = focusableElements.length - 1\n    }\n\n    return focusableElements[index].focus()\n  }\n  // no visible focusable elements, focus the popup\n  dom.getPopup().focus()\n}\n\nconst arrowKeys = [\n  'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown',\n  'Left', 'Right', 'Up', 'Down' // IE11\n]\n\nconst escKeys = [\n  'Escape',\n  'Esc' // IE11\n]\n\nconst keydownHandler = (instance, e, dismissWith) => {\n  const innerParams = privateProps.innerParams.get(instance)\n\n  if (innerParams.stopKeydownPropagation) {\n    e.stopPropagation()\n  }\n\n  // ENTER\n  if (e.key === 'Enter') {\n    handleEnter(instance, e, innerParams)\n\n  // TAB\n  } else if (e.key === 'Tab') {\n    handleTab(e, innerParams)\n\n  // ARROWS - switch focus between buttons\n  } else if (arrowKeys.includes(e.key)) {\n    handleArrows()\n\n  // ESC\n  } else if (escKeys.includes(e.key)) {\n    handleEsc(e, innerParams, dismissWith)\n  }\n}\n\nconst handleEnter = (instance, e, innerParams) => {\n  // #720 #721\n  if (e.isComposing) {\n    return\n  }\n\n  if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {\n    if (['textarea', 'file'].includes(innerParams.input)) {\n      return // do not submit\n    }\n\n    clickConfirm()\n    e.preventDefault()\n  }\n}\n\nconst handleTab = (e, innerParams) => {\n  const targetElement = e.target\n\n  const focusableElements = dom.getFocusableElements()\n  let btnIndex = -1\n  for (let i = 0; i < focusableElements.length; i++) {\n    if (targetElement === focusableElements[i]) {\n      btnIndex = i\n      break\n    }\n  }\n\n  if (!e.shiftKey) {\n    // Cycle to the next button\n    setFocus(innerParams, btnIndex, 1)\n  } else {\n    // Cycle to the prev button\n    setFocus(innerParams, btnIndex, -1)\n  }\n  e.stopPropagation()\n  e.preventDefault()\n}\n\nconst handleArrows = () => {\n  const confirmButton = dom.getConfirmButton()\n  const cancelButton = dom.getCancelButton()\n  // focus Cancel button if Confirm button is currently focused\n  if (document.activeElement === confirmButton && dom.isVisible(cancelButton)) {\n    cancelButton.focus()\n    // and vice versa\n  } else if (document.activeElement === cancelButton && dom.isVisible(confirmButton)) {\n    confirmButton.focus()\n  }\n}\n\nconst handleEsc = (e, innerParams, dismissWith) => {\n  if (callIfFunction(innerParams.allowEscapeKey)) {\n    e.preventDefault()\n    dismissWith(DismissReason.esc)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}