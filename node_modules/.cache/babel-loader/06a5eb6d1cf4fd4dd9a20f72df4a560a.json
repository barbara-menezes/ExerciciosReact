{"ast":null,"code":"import * as dom from './index.js';\nimport { swalClasses } from '../classes.js';\nimport { getChildByClass } from './domUtils.js';\nimport { error, isPromise } from '../utils.js';\nimport { showLoading } from '../../staticMethods/showLoading.js';\nexport const handleInputOptionsAndValue = (instance, params) => {\n  if (params.input === 'select' || params.input === 'radio') {\n    handleInputOptions(instance, params);\n  } else if (['text', 'email', 'number', 'tel', 'textarea'].includes(params.input) && isPromise(params.inputValue)) {\n    handleInputValue(instance, params);\n  }\n};\nexport const getInputValue = (instance, innerParams) => {\n  const input = instance.getInput();\n\n  if (!input) {\n    return null;\n  }\n\n  switch (innerParams.input) {\n    case 'checkbox':\n      return getCheckboxValue(input);\n\n    case 'radio':\n      return getRadioValue(input);\n\n    case 'file':\n      return getFileValue(input);\n\n    default:\n      return innerParams.inputAutoTrim ? input.value.trim() : input.value;\n  }\n};\n\nconst getCheckboxValue = input => input.checked ? 1 : 0;\n\nconst getRadioValue = input => input.checked ? input.value : null;\n\nconst getFileValue = input => input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;\n\nconst handleInputOptions = (instance, params) => {\n  const content = dom.getContent();\n\n  const processInputOptions = inputOptions => populateInputOptions[params.input](content, formatInputOptions(inputOptions), params);\n\n  if (isPromise(params.inputOptions)) {\n    showLoading();\n    params.inputOptions.then(inputOptions => {\n      instance.hideLoading();\n      processInputOptions(inputOptions);\n    });\n  } else if (typeof params.inputOptions === 'object') {\n    processInputOptions(params.inputOptions);\n  } else {\n    error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof params.inputOptions}`);\n  }\n};\n\nconst handleInputValue = (instance, params) => {\n  const input = instance.getInput();\n  dom.hide(input);\n  params.inputValue.then(inputValue => {\n    input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : `${inputValue}`;\n    dom.show(input);\n    input.focus();\n    instance.hideLoading();\n  }).catch(err => {\n    error(`Error in inputValue promise: ${err}`);\n    input.value = '';\n    dom.show(input);\n    input.focus();\n    instance.hideLoading();\n  });\n};\n\nconst populateInputOptions = {\n  select: (content, inputOptions, params) => {\n    const select = getChildByClass(content, swalClasses.select);\n    inputOptions.forEach(inputOption => {\n      const optionValue = inputOption[0];\n      const optionLabel = inputOption[1];\n      const option = document.createElement('option');\n      option.value = optionValue;\n      option.innerHTML = optionLabel;\n\n      if (params.inputValue.toString() === optionValue.toString()) {\n        option.selected = true;\n      }\n\n      select.appendChild(option);\n    });\n    select.focus();\n  },\n  radio: (content, inputOptions, params) => {\n    const radio = getChildByClass(content, swalClasses.radio);\n    inputOptions.forEach(inputOption => {\n      const radioValue = inputOption[0];\n      const radioLabel = inputOption[1];\n      const radioInput = document.createElement('input');\n      const radioLabelElement = document.createElement('label');\n      radioInput.type = 'radio';\n      radioInput.name = swalClasses.radio;\n      radioInput.value = radioValue;\n\n      if (params.inputValue.toString() === radioValue.toString()) {\n        radioInput.checked = true;\n      }\n\n      const label = document.createElement('span');\n      label.innerHTML = radioLabel;\n      label.className = swalClasses.label;\n      radioLabelElement.appendChild(radioInput);\n      radioLabelElement.appendChild(label);\n      radio.appendChild(radioLabelElement);\n    });\n    const radios = radio.querySelectorAll('input');\n\n    if (radios.length) {\n      radios[0].focus();\n    }\n  }\n};\n/**\n * Converts `inputOptions` into an array of `[value, label]`s\n * @param inputOptions\n */\n\nconst formatInputOptions = inputOptions => {\n  const result = [];\n\n  if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n    inputOptions.forEach((value, key) => {\n      result.push([key, value]);\n    });\n  } else {\n    Object.keys(inputOptions).forEach(key => {\n      result.push([key, inputOptions[key]]);\n    });\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/utils/dom/inputUtils.js"],"names":["dom","swalClasses","getChildByClass","error","isPromise","showLoading","handleInputOptionsAndValue","instance","params","input","handleInputOptions","includes","inputValue","handleInputValue","getInputValue","innerParams","getInput","getCheckboxValue","getRadioValue","getFileValue","inputAutoTrim","value","trim","checked","files","length","getAttribute","content","getContent","processInputOptions","inputOptions","populateInputOptions","formatInputOptions","then","hideLoading","hide","parseFloat","show","focus","catch","err","select","forEach","inputOption","optionValue","optionLabel","option","document","createElement","innerHTML","toString","selected","appendChild","radio","radioValue","radioLabel","radioInput","radioLabelElement","type","name","label","className","radios","querySelectorAll","result","Map","key","push","Object","keys"],"mappings":"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","sourcesContent":["import * as dom from './index.js'\nimport { swalClasses } from '../classes.js'\nimport { getChildByClass } from './domUtils.js'\nimport { error, isPromise } from '../utils.js'\nimport { showLoading } from '../../staticMethods/showLoading.js'\n\nexport const handleInputOptionsAndValue = (instance, params) => {\n  if (params.input === 'select' || params.input === 'radio') {\n    handleInputOptions(instance, params)\n  } else if (['text', 'email', 'number', 'tel', 'textarea'].includes(params.input) && isPromise(params.inputValue)) {\n    handleInputValue(instance, params)\n  }\n}\n\nexport const getInputValue = (instance, innerParams) => {\n  const input = instance.getInput()\n  if (!input) {\n    return null\n  }\n  switch (innerParams.input) {\n    case 'checkbox':\n      return getCheckboxValue(input)\n    case 'radio':\n      return getRadioValue(input)\n    case 'file':\n      return getFileValue(input)\n    default:\n      return innerParams.inputAutoTrim ? input.value.trim() : input.value\n  }\n}\n\nconst getCheckboxValue = (input) => input.checked ? 1 : 0\n\nconst getRadioValue = (input) => input.checked ? input.value : null\n\nconst getFileValue = (input) => input.files.length ? (input.getAttribute('multiple') !== null ? input.files : input.files[0]) : null\n\nconst handleInputOptions = (instance, params) => {\n  const content = dom.getContent()\n  const processInputOptions = (inputOptions) => populateInputOptions[params.input](content, formatInputOptions(inputOptions), params)\n  if (isPromise(params.inputOptions)) {\n    showLoading()\n    params.inputOptions.then((inputOptions) => {\n      instance.hideLoading()\n      processInputOptions(inputOptions)\n    })\n  } else if (typeof params.inputOptions === 'object') {\n    processInputOptions(params.inputOptions)\n  } else {\n    error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof params.inputOptions}`)\n  }\n}\n\nconst handleInputValue = (instance, params) => {\n  const input = instance.getInput()\n  dom.hide(input)\n  params.inputValue.then((inputValue) => {\n    input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : `${inputValue}`\n    dom.show(input)\n    input.focus()\n    instance.hideLoading()\n  })\n    .catch((err) => {\n      error(`Error in inputValue promise: ${err}`)\n      input.value = ''\n      dom.show(input)\n      input.focus()\n      instance.hideLoading()\n    })\n}\n\nconst populateInputOptions = {\n  select: (content, inputOptions, params) => {\n    const select = getChildByClass(content, swalClasses.select)\n    inputOptions.forEach(inputOption => {\n      const optionValue = inputOption[0]\n      const optionLabel = inputOption[1]\n      const option = document.createElement('option')\n      option.value = optionValue\n      option.innerHTML = optionLabel\n      if (params.inputValue.toString() === optionValue.toString()) {\n        option.selected = true\n      }\n      select.appendChild(option)\n    })\n    select.focus()\n  },\n\n  radio: (content, inputOptions, params) => {\n    const radio = getChildByClass(content, swalClasses.radio)\n    inputOptions.forEach(inputOption => {\n      const radioValue = inputOption[0]\n      const radioLabel = inputOption[1]\n      const radioInput = document.createElement('input')\n      const radioLabelElement = document.createElement('label')\n      radioInput.type = 'radio'\n      radioInput.name = swalClasses.radio\n      radioInput.value = radioValue\n      if (params.inputValue.toString() === radioValue.toString()) {\n        radioInput.checked = true\n      }\n      const label = document.createElement('span')\n      label.innerHTML = radioLabel\n      label.className = swalClasses.label\n      radioLabelElement.appendChild(radioInput)\n      radioLabelElement.appendChild(label)\n      radio.appendChild(radioLabelElement)\n    })\n    const radios = radio.querySelectorAll('input')\n    if (radios.length) {\n      radios[0].focus()\n    }\n  }\n}\n\n/**\n * Converts `inputOptions` into an array of `[value, label]`s\n * @param inputOptions\n */\nconst formatInputOptions = (inputOptions) => {\n  const result = []\n  if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n    inputOptions.forEach((value, key) => {\n      result.push([key, value])\n    })\n  } else {\n    Object.keys(inputOptions).forEach(key => {\n      result.push([key, inputOptions[key]])\n    })\n  }\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}