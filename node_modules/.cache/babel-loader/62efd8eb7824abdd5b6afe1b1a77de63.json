{"ast":null,"code":"import defaultParams, { showWarningsForParams } from '../utils/params.js';\nimport * as dom from '../utils/dom/index.js';\nimport { swalClasses } from '../utils/classes.js';\nimport Timer from '../utils/Timer.js';\nimport { callIfFunction } from '../utils/utils.js';\nimport setParameters from '../utils/setParameters.js';\nimport globalState from '../globalState.js';\nimport { openPopup } from '../utils/openPopup.js';\nimport privateProps from '../privateProps.js';\nimport privateMethods from '../privateMethods.js';\nimport { handleInputOptionsAndValue } from '../utils/dom/inputUtils.js';\nimport { handleConfirmButtonClick, handleCancelButtonClick } from './buttons-handlers.js';\nimport { addKeydownHandler, setFocus } from './keydown-handler.js';\nimport { handlePopupClick } from './popup-click-handler.js';\nimport { DismissReason } from '../utils/DismissReason.js';\nexport function _main(userParams) {\n  showWarningsForParams(userParams);\n\n  if (globalState.currentInstance) {\n    globalState.currentInstance._destroy();\n  }\n\n  globalState.currentInstance = this;\n  const innerParams = prepareParams(userParams);\n  setParameters(innerParams);\n  Object.freeze(innerParams); // clear the previous timer\n\n  if (globalState.timeout) {\n    globalState.timeout.stop();\n    delete globalState.timeout;\n  } // clear the restore focus timeout\n\n\n  clearTimeout(globalState.restoreFocusTimeout);\n  const domCache = populateDomCache(this);\n  dom.render(this, innerParams);\n  privateProps.innerParams.set(this, innerParams);\n  return swalPromise(this, domCache, innerParams);\n}\n\nconst prepareParams = userParams => {\n  const showClass = Object.assign({}, defaultParams.showClass, userParams.showClass);\n  const hideClass = Object.assign({}, defaultParams.hideClass, userParams.hideClass);\n  const params = Object.assign({}, defaultParams, userParams);\n  params.showClass = showClass;\n  params.hideClass = hideClass; // @deprecated\n\n  if (userParams.animation === false) {\n    params.showClass = {\n      popup: '',\n      backdrop: 'swal2-backdrop-show swal2-noanimation'\n    };\n    params.hideClass = {};\n  }\n\n  return params;\n};\n\nconst swalPromise = (instance, domCache, innerParams) => {\n  return new Promise(resolve => {\n    // functions to handle all closings/dismissals\n    const dismissWith = dismiss => {\n      instance.closePopup({\n        dismiss\n      });\n    };\n\n    privateMethods.swalPromiseResolve.set(instance, resolve);\n    setupTimer(globalState, innerParams, dismissWith);\n\n    domCache.confirmButton.onclick = () => handleConfirmButtonClick(instance, innerParams);\n\n    domCache.cancelButton.onclick = () => handleCancelButtonClick(instance, dismissWith);\n\n    domCache.closeButton.onclick = () => dismissWith(DismissReason.close);\n\n    handlePopupClick(instance, domCache, dismissWith);\n    addKeydownHandler(instance, globalState, innerParams, dismissWith);\n\n    if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {\n      dom.addClass(document.body, swalClasses['toast-column']);\n    } else {\n      dom.removeClass(document.body, swalClasses['toast-column']);\n    }\n\n    handleInputOptionsAndValue(instance, innerParams);\n    openPopup(innerParams);\n    initFocus(domCache, innerParams); // Scroll container to top on open (#1247)\n\n    domCache.container.scrollTop = 0;\n  });\n};\n\nconst populateDomCache = instance => {\n  const domCache = {\n    popup: dom.getPopup(),\n    container: dom.getContainer(),\n    content: dom.getContent(),\n    actions: dom.getActions(),\n    confirmButton: dom.getConfirmButton(),\n    cancelButton: dom.getCancelButton(),\n    closeButton: dom.getCloseButton(),\n    validationMessage: dom.getValidationMessage(),\n    progressSteps: dom.getProgressSteps()\n  };\n  privateProps.domCache.set(instance, domCache);\n  return domCache;\n};\n\nconst setupTimer = (globalState, innerParams, dismissWith) => {\n  const timerProgressBar = dom.getTimerProgressBar();\n  dom.hide(timerProgressBar);\n\n  if (innerParams.timer) {\n    globalState.timeout = new Timer(() => {\n      dismissWith('timer');\n      delete globalState.timeout;\n    }, innerParams.timer);\n\n    if (innerParams.timerProgressBar) {\n      dom.show(timerProgressBar);\n      setTimeout(() => {\n        if (globalState.timeout.running) {\n          // timer can be already stopped at this point\n          dom.animateTimerProgressBar(innerParams.timer);\n        }\n      });\n    }\n  }\n};\n\nconst initFocus = (domCache, innerParams) => {\n  if (innerParams.toast) {\n    return;\n  }\n\n  if (!callIfFunction(innerParams.allowEnterKey)) {\n    return blurActiveElement();\n  }\n\n  if (innerParams.focusCancel && dom.isVisible(domCache.cancelButton)) {\n    return domCache.cancelButton.focus();\n  }\n\n  if (innerParams.focusConfirm && dom.isVisible(domCache.confirmButton)) {\n    return domCache.confirmButton.focus();\n  }\n\n  setFocus(innerParams, -1, 1);\n};\n\nconst blurActiveElement = () => {\n  if (document.activeElement && typeof document.activeElement.blur === 'function') {\n    document.activeElement.blur();\n  }\n};","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/instanceMethods/_main.js"],"names":["defaultParams","showWarningsForParams","dom","swalClasses","Timer","callIfFunction","setParameters","globalState","openPopup","privateProps","privateMethods","handleInputOptionsAndValue","handleConfirmButtonClick","handleCancelButtonClick","addKeydownHandler","setFocus","handlePopupClick","DismissReason","_main","userParams","currentInstance","_destroy","innerParams","prepareParams","Object","freeze","timeout","stop","clearTimeout","restoreFocusTimeout","domCache","populateDomCache","render","set","swalPromise","showClass","assign","hideClass","params","animation","popup","backdrop","instance","Promise","resolve","dismissWith","dismiss","closePopup","swalPromiseResolve","setupTimer","confirmButton","onclick","cancelButton","closeButton","close","toast","input","footer","showCloseButton","addClass","document","body","removeClass","initFocus","container","scrollTop","getPopup","getContainer","content","getContent","actions","getActions","getConfirmButton","getCancelButton","getCloseButton","validationMessage","getValidationMessage","progressSteps","getProgressSteps","timerProgressBar","getTimerProgressBar","hide","timer","show","setTimeout","running","animateTimerProgressBar","allowEnterKey","blurActiveElement","focusCancel","isVisible","focus","focusConfirm","activeElement","blur"],"mappings":"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","sourcesContent":["import defaultParams, { showWarningsForParams } from '../utils/params.js'\nimport * as dom from '../utils/dom/index.js'\nimport { swalClasses } from '../utils/classes.js'\nimport Timer from '../utils/Timer.js'\nimport { callIfFunction } from '../utils/utils.js'\nimport setParameters from '../utils/setParameters.js'\nimport globalState from '../globalState.js'\nimport { openPopup } from '../utils/openPopup.js'\nimport privateProps from '../privateProps.js'\nimport privateMethods from '../privateMethods.js'\nimport { handleInputOptionsAndValue } from '../utils/dom/inputUtils.js'\nimport { handleConfirmButtonClick, handleCancelButtonClick } from './buttons-handlers.js'\nimport { addKeydownHandler, setFocus } from './keydown-handler.js'\nimport { handlePopupClick } from './popup-click-handler.js'\nimport { DismissReason } from '../utils/DismissReason.js'\n\nexport function _main (userParams) {\n  showWarningsForParams(userParams)\n\n  if (globalState.currentInstance) {\n    globalState.currentInstance._destroy()\n  }\n  globalState.currentInstance = this\n\n  const innerParams = prepareParams(userParams)\n  setParameters(innerParams)\n  Object.freeze(innerParams)\n\n  // clear the previous timer\n  if (globalState.timeout) {\n    globalState.timeout.stop()\n    delete globalState.timeout\n  }\n\n  // clear the restore focus timeout\n  clearTimeout(globalState.restoreFocusTimeout)\n\n  const domCache = populateDomCache(this)\n\n  dom.render(this, innerParams)\n\n  privateProps.innerParams.set(this, innerParams)\n\n  return swalPromise(this, domCache, innerParams)\n}\n\nconst prepareParams = (userParams) => {\n  const showClass = Object.assign({}, defaultParams.showClass, userParams.showClass)\n  const hideClass = Object.assign({}, defaultParams.hideClass, userParams.hideClass)\n  const params = Object.assign({}, defaultParams, userParams)\n  params.showClass = showClass\n  params.hideClass = hideClass\n  // @deprecated\n  if (userParams.animation === false) {\n    params.showClass = {\n      popup: '',\n      backdrop: 'swal2-backdrop-show swal2-noanimation'\n    }\n    params.hideClass = {}\n  }\n  return params\n}\n\nconst swalPromise = (instance, domCache, innerParams) => {\n  return new Promise((resolve) => {\n    // functions to handle all closings/dismissals\n    const dismissWith = (dismiss) => {\n      instance.closePopup({ dismiss })\n    }\n\n    privateMethods.swalPromiseResolve.set(instance, resolve)\n\n    setupTimer(globalState, innerParams, dismissWith)\n\n    domCache.confirmButton.onclick = () => handleConfirmButtonClick(instance, innerParams)\n    domCache.cancelButton.onclick = () => handleCancelButtonClick(instance, dismissWith)\n\n    domCache.closeButton.onclick = () => dismissWith(DismissReason.close)\n\n    handlePopupClick(instance, domCache, dismissWith)\n\n    addKeydownHandler(instance, globalState, innerParams, dismissWith)\n\n    if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {\n      dom.addClass(document.body, swalClasses['toast-column'])\n    } else {\n      dom.removeClass(document.body, swalClasses['toast-column'])\n    }\n\n    handleInputOptionsAndValue(instance, innerParams)\n\n    openPopup(innerParams)\n\n    initFocus(domCache, innerParams)\n\n    // Scroll container to top on open (#1247)\n    domCache.container.scrollTop = 0\n  })\n}\n\nconst populateDomCache = (instance) => {\n  const domCache = {\n    popup: dom.getPopup(),\n    container: dom.getContainer(),\n    content: dom.getContent(),\n    actions: dom.getActions(),\n    confirmButton: dom.getConfirmButton(),\n    cancelButton: dom.getCancelButton(),\n    closeButton: dom.getCloseButton(),\n    validationMessage: dom.getValidationMessage(),\n    progressSteps: dom.getProgressSteps()\n  }\n  privateProps.domCache.set(instance, domCache)\n\n  return domCache\n}\n\nconst setupTimer = (globalState, innerParams, dismissWith) => {\n  const timerProgressBar = dom.getTimerProgressBar()\n  dom.hide(timerProgressBar)\n  if (innerParams.timer) {\n    globalState.timeout = new Timer(() => {\n      dismissWith('timer')\n      delete globalState.timeout\n    }, innerParams.timer)\n    if (innerParams.timerProgressBar) {\n      dom.show(timerProgressBar)\n      setTimeout(() => {\n        if (globalState.timeout.running) { // timer can be already stopped at this point\n          dom.animateTimerProgressBar(innerParams.timer)\n        }\n      })\n    }\n  }\n}\n\nconst initFocus = (domCache, innerParams) => {\n  if (innerParams.toast) {\n    return\n  }\n\n  if (!callIfFunction(innerParams.allowEnterKey)) {\n    return blurActiveElement()\n  }\n\n  if (innerParams.focusCancel && dom.isVisible(domCache.cancelButton)) {\n    return domCache.cancelButton.focus()\n  }\n\n  if (innerParams.focusConfirm && dom.isVisible(domCache.confirmButton)) {\n    return domCache.confirmButton.focus()\n  }\n\n  setFocus(innerParams, -1, 1)\n}\n\nconst blurActiveElement = () => {\n  if (document.activeElement && typeof document.activeElement.blur === 'function') {\n    document.activeElement.blur()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}