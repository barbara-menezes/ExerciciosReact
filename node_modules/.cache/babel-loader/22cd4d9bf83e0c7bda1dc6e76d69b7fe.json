{"ast":null,"code":"import { isVisible } from '../utils/dom/domUtils.js';\nimport { getInputValue } from '../utils/dom/inputUtils.js';\nimport { getValidationMessage } from '../utils/dom/getters.js';\nimport { showLoading } from '../staticMethods/showLoading.js';\nimport { DismissReason } from '../utils/DismissReason.js';\nexport const handleConfirmButtonClick = (instance, innerParams) => {\n  instance.disableButtons();\n\n  if (innerParams.input) {\n    handleConfirmWithInput(instance, innerParams);\n  } else {\n    confirm(instance, innerParams, true);\n  }\n};\nexport const handleCancelButtonClick = (instance, dismissWith) => {\n  instance.disableButtons();\n  dismissWith(DismissReason.cancel);\n};\n\nconst handleConfirmWithInput = (instance, innerParams) => {\n  const inputValue = getInputValue(instance, innerParams);\n\n  if (innerParams.inputValidator) {\n    instance.disableInput();\n    const validationPromise = Promise.resolve().then(() => innerParams.inputValidator(inputValue, innerParams.validationMessage));\n    validationPromise.then(validationMessage => {\n      instance.enableButtons();\n      instance.enableInput();\n\n      if (validationMessage) {\n        instance.showValidationMessage(validationMessage);\n      } else {\n        confirm(instance, innerParams, inputValue);\n      }\n    });\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons();\n    instance.showValidationMessage(innerParams.validationMessage);\n  } else {\n    confirm(instance, innerParams, inputValue);\n  }\n};\n\nconst succeedWith = (instance, value) => {\n  instance.closePopup({\n    value\n  });\n};\n\nconst confirm = (instance, innerParams, value) => {\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading(); // TODO: make showLoading an *instance* method\n  }\n\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage();\n    const preConfirmPromise = Promise.resolve().then(() => innerParams.preConfirm(value, innerParams.validationMessage));\n    preConfirmPromise.then(preConfirmValue => {\n      if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n        instance.hideLoading();\n      } else {\n        succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n      }\n    });\n  } else {\n    succeedWith(instance, value);\n  }\n};","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/instanceMethods/buttons-handlers.js"],"names":["isVisible","getInputValue","getValidationMessage","showLoading","DismissReason","handleConfirmButtonClick","instance","innerParams","disableButtons","input","handleConfirmWithInput","confirm","handleCancelButtonClick","dismissWith","cancel","inputValue","inputValidator","disableInput","validationPromise","Promise","resolve","then","validationMessage","enableButtons","enableInput","showValidationMessage","getInput","checkValidity","succeedWith","value","closePopup","showLoaderOnConfirm","preConfirm","resetValidationMessage","preConfirmPromise","preConfirmValue","hideLoading"],"mappings":"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","sourcesContent":["import { isVisible } from '../utils/dom/domUtils.js'\nimport { getInputValue } from '../utils/dom/inputUtils.js'\nimport { getValidationMessage } from '../utils/dom/getters.js'\nimport { showLoading } from '../staticMethods/showLoading.js'\nimport { DismissReason } from '../utils/DismissReason.js'\n\nexport const handleConfirmButtonClick = (instance, innerParams) => {\n  instance.disableButtons()\n  if (innerParams.input) {\n    handleConfirmWithInput(instance, innerParams)\n  } else {\n    confirm(instance, innerParams, true)\n  }\n}\n\nexport const handleCancelButtonClick = (instance, dismissWith) => {\n  instance.disableButtons()\n  dismissWith(DismissReason.cancel)\n}\n\nconst handleConfirmWithInput = (instance, innerParams) => {\n  const inputValue = getInputValue(instance, innerParams)\n\n  if (innerParams.inputValidator) {\n    instance.disableInput()\n    const validationPromise = Promise.resolve().then(() => innerParams.inputValidator(inputValue, innerParams.validationMessage))\n    validationPromise.then(\n      (validationMessage) => {\n        instance.enableButtons()\n        instance.enableInput()\n        if (validationMessage) {\n          instance.showValidationMessage(validationMessage)\n        } else {\n          confirm(instance, innerParams, inputValue)\n        }\n      }\n    )\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons()\n    instance.showValidationMessage(innerParams.validationMessage)\n  } else {\n    confirm(instance, innerParams, inputValue)\n  }\n}\n\nconst succeedWith = (instance, value) => {\n  instance.closePopup({ value })\n}\n\nconst confirm = (instance, innerParams, value) => {\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading() // TODO: make showLoading an *instance* method\n  }\n\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage()\n    const preConfirmPromise = Promise.resolve().then(() => innerParams.preConfirm(value, innerParams.validationMessage))\n    preConfirmPromise.then(\n      (preConfirmValue) => {\n        if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n          instance.hideLoading()\n        } else {\n          succeedWith(instance, typeof (preConfirmValue) === 'undefined' ? value : preConfirmValue)\n        }\n      }\n    )\n  } else {\n    succeedWith(instance, value)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}