{"ast":null,"code":"import * as dom from '../utils/dom/index.js'; // private global state for the queue feature\n\nlet currentSteps = [];\n/*\n * Global function for chaining sweetAlert popups\n */\n\nexport const queue = function (steps) {\n  const Swal = this;\n  currentSteps = steps;\n\n  const resetAndResolve = (resolve, value) => {\n    currentSteps = [];\n    resolve(value);\n  };\n\n  const queueResult = [];\n  return new Promise(resolve => {\n    (function step(i, callback) {\n      if (i < currentSteps.length) {\n        document.body.setAttribute('data-swal2-queue-step', i);\n        Swal.fire(currentSteps[i]).then(result => {\n          if (typeof result.value !== 'undefined') {\n            queueResult.push(result.value);\n            step(i + 1, callback);\n          } else {\n            resetAndResolve(resolve, {\n              dismiss: result.dismiss\n            });\n          }\n        });\n      } else {\n        resetAndResolve(resolve, {\n          value: queueResult\n        });\n      }\n    })(0);\n  });\n};\n/*\n * Global function for getting the index of current popup in queue\n */\n\nexport const getQueueStep = () => dom.getContainer().getAttribute('data-queue-step');\n/*\n * Global function for inserting a popup to the queue\n */\n\nexport const insertQueueStep = (step, index) => {\n  if (index && index < currentSteps.length) {\n    return currentSteps.splice(index, 0, step);\n  }\n\n  return currentSteps.push(step);\n};\n/*\n * Global function for deleting a popup from the queue\n */\n\nexport const deleteQueueStep = index => {\n  if (typeof currentSteps[index] !== 'undefined') {\n    currentSteps.splice(index, 1);\n  }\n};","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/staticMethods/queue.js"],"names":["dom","currentSteps","queue","steps","Swal","resetAndResolve","resolve","value","queueResult","Promise","step","i","callback","length","document","body","setAttribute","fire","then","result","push","dismiss","getQueueStep","getContainer","getAttribute","insertQueueStep","index","splice","deleteQueueStep"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,uBAArB,C,CAEA;;AACA,IAAIC,YAAY,GAAG,EAAnB;AAEA;;;;AAGA,OAAO,MAAMC,KAAK,GAAG,UAAUC,KAAV,EAAiB;AACpC,QAAMC,IAAI,GAAG,IAAb;AACAH,EAAAA,YAAY,GAAGE,KAAf;;AAEA,QAAME,eAAe,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC1CN,IAAAA,YAAY,GAAG,EAAf;AACAK,IAAAA,OAAO,CAACC,KAAD,CAAP;AACD,GAHD;;AAKA,QAAMC,WAAW,GAAG,EAApB;AACA,SAAO,IAAIC,OAAJ,CAAaH,OAAD,IAAa;AAC9B,KAAC,SAASI,IAAT,CAAeC,CAAf,EAAkBC,QAAlB,EAA4B;AAC3B,UAAID,CAAC,GAAGV,YAAY,CAACY,MAArB,EAA6B;AAC3BC,QAAAA,QAAQ,CAACC,IAAT,CAAcC,YAAd,CAA2B,uBAA3B,EAAoDL,CAApD;AACAP,QAAAA,IAAI,CAACa,IAAL,CAAUhB,YAAY,CAACU,CAAD,CAAtB,EAA2BO,IAA3B,CAAiCC,MAAD,IAAY;AAC1C,cAAI,OAAOA,MAAM,CAACZ,KAAd,KAAwB,WAA5B,EAAyC;AACvCC,YAAAA,WAAW,CAACY,IAAZ,CAAiBD,MAAM,CAACZ,KAAxB;AACAG,YAAAA,IAAI,CAACC,CAAC,GAAG,CAAL,EAAQC,QAAR,CAAJ;AACD,WAHD,MAGO;AACLP,YAAAA,eAAe,CAACC,OAAD,EAAU;AAAEe,cAAAA,OAAO,EAAEF,MAAM,CAACE;AAAlB,aAAV,CAAf;AACD;AACF,SAPD;AAQD,OAVD,MAUO;AACLhB,QAAAA,eAAe,CAACC,OAAD,EAAU;AAAEC,UAAAA,KAAK,EAAEC;AAAT,SAAV,CAAf;AACD;AACF,KAdD,EAcG,CAdH;AAeD,GAhBM,CAAP;AAiBD,CA3BM;AA6BP;;;;AAGA,OAAO,MAAMc,YAAY,GAAG,MAAMtB,GAAG,CAACuB,YAAJ,GAAmBC,YAAnB,CAAgC,iBAAhC,CAA3B;AAEP;;;;AAGA,OAAO,MAAMC,eAAe,GAAG,CAACf,IAAD,EAAOgB,KAAP,KAAiB;AAC9C,MAAIA,KAAK,IAAIA,KAAK,GAAGzB,YAAY,CAACY,MAAlC,EAA0C;AACxC,WAAOZ,YAAY,CAAC0B,MAAb,CAAoBD,KAApB,EAA2B,CAA3B,EAA8BhB,IAA9B,CAAP;AACD;;AACD,SAAOT,YAAY,CAACmB,IAAb,CAAkBV,IAAlB,CAAP;AACD,CALM;AAOP;;;;AAGA,OAAO,MAAMkB,eAAe,GAAIF,KAAD,IAAW;AACxC,MAAI,OAAOzB,YAAY,CAACyB,KAAD,CAAnB,KAA+B,WAAnC,EAAgD;AAC9CzB,IAAAA,YAAY,CAAC0B,MAAb,CAAoBD,KAApB,EAA2B,CAA3B;AACD;AACF,CAJM","sourcesContent":["import * as dom from '../utils/dom/index.js'\n\n// private global state for the queue feature\nlet currentSteps = []\n\n/*\n * Global function for chaining sweetAlert popups\n */\nexport const queue = function (steps) {\n  const Swal = this\n  currentSteps = steps\n\n  const resetAndResolve = (resolve, value) => {\n    currentSteps = []\n    resolve(value)\n  }\n\n  const queueResult = []\n  return new Promise((resolve) => {\n    (function step (i, callback) {\n      if (i < currentSteps.length) {\n        document.body.setAttribute('data-swal2-queue-step', i)\n        Swal.fire(currentSteps[i]).then((result) => {\n          if (typeof result.value !== 'undefined') {\n            queueResult.push(result.value)\n            step(i + 1, callback)\n          } else {\n            resetAndResolve(resolve, { dismiss: result.dismiss })\n          }\n        })\n      } else {\n        resetAndResolve(resolve, { value: queueResult })\n      }\n    })(0)\n  })\n}\n\n/*\n * Global function for getting the index of current popup in queue\n */\nexport const getQueueStep = () => dom.getContainer().getAttribute('data-queue-step')\n\n/*\n * Global function for inserting a popup to the queue\n */\nexport const insertQueueStep = (step, index) => {\n  if (index && index < currentSteps.length) {\n    return currentSteps.splice(index, 0, step)\n  }\n  return currentSteps.push(step)\n}\n\n/*\n * Global function for deleting a popup from the queue\n */\nexport const deleteQueueStep = (index) => {\n  if (typeof currentSteps[index] !== 'undefined') {\n    currentSteps.splice(index, 1)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}