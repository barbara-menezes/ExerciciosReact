{"ast":null,"code":"export const consolePrefix = 'SweetAlert2:';\n/**\n * Filter the unique values into a new array\n * @param arr\n */\n\nexport const uniqueArray = arr => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n\n  return result;\n};\n/**\n * Capitalize the first letter of a string\n * @param str\n */\n\nexport const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);\n/**\n * Returns the array ob object values (Object.values isn't supported in IE11)\n * @param obj\n */\n\nexport const objectValues = obj => Object.keys(obj).map(key => obj[key]);\n/**\n * Convert NodeList to Array\n * @param nodeList\n */\n\nexport const toArray = nodeList => Array.prototype.slice.call(nodeList);\n/**\n * Standardise console warnings\n * @param message\n */\n\nexport const warn = message => {\n  console.warn(`${consolePrefix} ${message}`);\n};\n/**\n * Standardise console errors\n * @param message\n */\n\nexport const error = message => {\n  console.error(`${consolePrefix} ${message}`);\n};\n/**\n * Private global state for `warnOnce`\n * @type {Array}\n * @private\n */\n\nconst previousWarnOnceMessages = [];\n/**\n * Show a console warning, but only if it hasn't already been shown\n * @param message\n */\n\nexport const warnOnce = message => {\n  if (!previousWarnOnceMessages.includes(message)) {\n    previousWarnOnceMessages.push(message);\n    warn(message);\n  }\n};\n/**\n * Show a one-time console warning about deprecated params/methods\n */\n\nexport const warnAboutDepreation = (deprecatedParam, useInstead) => {\n  warnOnce(`\"${deprecatedParam}\" is deprecated and will be removed in the next major release. Please use \"${useInstead}\" instead.`);\n};\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n * @param arg\n */\n\nexport const callIfFunction = arg => typeof arg === 'function' ? arg() : arg;\nexport const isPromise = arg => arg && Promise.resolve(arg) === arg;","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/utils/utils.js"],"names":["consolePrefix","uniqueArray","arr","result","i","length","indexOf","push","capitalizeFirstLetter","str","charAt","toUpperCase","slice","objectValues","obj","Object","keys","map","key","toArray","nodeList","Array","prototype","call","warn","message","console","error","previousWarnOnceMessages","warnOnce","includes","warnAboutDepreation","deprecatedParam","useInstead","callIfFunction","arg","isPromise","Promise","resolve"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,cAAtB;AAEP;;;;;AAIA,OAAO,MAAMC,WAAW,GAAIC,GAAD,IAAS;AAClC,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAID,MAAM,CAACG,OAAP,CAAeJ,GAAG,CAACE,CAAD,CAAlB,MAA2B,CAAC,CAAhC,EAAmC;AACjCD,MAAAA,MAAM,CAACI,IAAP,CAAYL,GAAG,CAACE,CAAD,CAAf;AACD;AACF;;AACD,SAAOD,MAAP;AACD,CARM;AAUP;;;;;AAIA,OAAO,MAAMK,qBAAqB,GAAIC,GAAD,IAASA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAArE;AAEP;;;;;AAIA,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAASC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,GAAjB,CAAqBC,GAAG,IAAIJ,GAAG,CAACI,GAAD,CAA/B,CAA9B;AAEP;;;;;AAIA,OAAO,MAAMC,OAAO,GAAIC,QAAD,IAAcC,KAAK,CAACC,SAAN,CAAgBV,KAAhB,CAAsBW,IAAtB,CAA2BH,QAA3B,CAA9B;AAEP;;;;;AAIA,OAAO,MAAMI,IAAI,GAAIC,OAAD,IAAa;AAC/BC,EAAAA,OAAO,CAACF,IAAR,CAAc,GAAExB,aAAc,IAAGyB,OAAQ,EAAzC;AACD,CAFM;AAIP;;;;;AAIA,OAAO,MAAME,KAAK,GAAIF,OAAD,IAAa;AAChCC,EAAAA,OAAO,CAACC,KAAR,CAAe,GAAE3B,aAAc,IAAGyB,OAAQ,EAA1C;AACD,CAFM;AAIP;;;;;;AAKA,MAAMG,wBAAwB,GAAG,EAAjC;AAEA;;;;;AAIA,OAAO,MAAMC,QAAQ,GAAIJ,OAAD,IAAa;AACnC,MAAI,CAACG,wBAAwB,CAACE,QAAzB,CAAkCL,OAAlC,CAAL,EAAiD;AAC/CG,IAAAA,wBAAwB,CAACrB,IAAzB,CAA8BkB,OAA9B;AACAD,IAAAA,IAAI,CAACC,OAAD,CAAJ;AACD;AACF,CALM;AAOP;;;;AAGA,OAAO,MAAMM,mBAAmB,GAAG,CAACC,eAAD,EAAkBC,UAAlB,KAAiC;AAClEJ,EAAAA,QAAQ,CAAE,IAAGG,eAAgB,8EAA6EC,UAAW,YAA7G,CAAR;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,MAAMC,cAAc,GAAIC,GAAD,IAAS,OAAOA,GAAP,KAAe,UAAf,GAA4BA,GAAG,EAA/B,GAAoCA,GAApE;AAEP,OAAO,MAAMC,SAAS,GAAID,GAAD,IAASA,GAAG,IAAIE,OAAO,CAACC,OAAR,CAAgBH,GAAhB,MAAyBA,GAA3D","sourcesContent":["export const consolePrefix = 'SweetAlert2:'\n\n/**\n * Filter the unique values into a new array\n * @param arr\n */\nexport const uniqueArray = (arr) => {\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i])\n    }\n  }\n  return result\n}\n\n/**\n * Capitalize the first letter of a string\n * @param str\n */\nexport const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1)\n\n/**\n * Returns the array ob object values (Object.values isn't supported in IE11)\n * @param obj\n */\nexport const objectValues = (obj) => Object.keys(obj).map(key => obj[key])\n\n/**\n * Convert NodeList to Array\n * @param nodeList\n */\nexport const toArray = (nodeList) => Array.prototype.slice.call(nodeList)\n\n/**\n * Standardise console warnings\n * @param message\n */\nexport const warn = (message) => {\n  console.warn(`${consolePrefix} ${message}`)\n}\n\n/**\n * Standardise console errors\n * @param message\n */\nexport const error = (message) => {\n  console.error(`${consolePrefix} ${message}`)\n}\n\n/**\n * Private global state for `warnOnce`\n * @type {Array}\n * @private\n */\nconst previousWarnOnceMessages = []\n\n/**\n * Show a console warning, but only if it hasn't already been shown\n * @param message\n */\nexport const warnOnce = (message) => {\n  if (!previousWarnOnceMessages.includes(message)) {\n    previousWarnOnceMessages.push(message)\n    warn(message)\n  }\n}\n\n/**\n * Show a one-time console warning about deprecated params/methods\n */\nexport const warnAboutDepreation = (deprecatedParam, useInstead) => {\n  warnOnce(`\"${deprecatedParam}\" is deprecated and will be removed in the next major release. Please use \"${useInstead}\" instead.`)\n}\n\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n * @param arg\n */\nexport const callIfFunction = (arg) => typeof arg === 'function' ? arg() : arg\n\nexport const isPromise = (arg) => arg && Promise.resolve(arg) === arg\n"]},"metadata":{},"sourceType":"module"}