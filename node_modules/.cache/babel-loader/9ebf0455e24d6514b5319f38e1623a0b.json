{"ast":null,"code":"import { swalClasses, iconTypes } from '../../classes.js';\nimport { error } from '../../utils.js';\nimport * as dom from '../../dom/index.js';\nimport privateProps from '../../../privateProps.js';\nexport const renderIcon = (instance, params) => {\n  const innerParams = privateProps.innerParams.get(instance); // if the give icon already rendered, apply the custom class without re-rendering the icon\n\n  if (innerParams && params.icon === innerParams.icon && dom.getIcon()) {\n    dom.applyCustomClass(dom.getIcon(), params, 'icon');\n    return;\n  }\n\n  hideAllIcons();\n\n  if (!params.icon) {\n    return;\n  }\n\n  if (Object.keys(iconTypes).indexOf(params.icon) !== -1) {\n    const icon = dom.elementBySelector(`.${swalClasses.icon}.${iconTypes[params.icon]}`);\n    dom.show(icon); // Custom or default content\n\n    setContent(icon, params);\n    adjustSuccessIconBackgoundColor(); // Custom class\n\n    dom.applyCustomClass(icon, params, 'icon'); // Animate icon\n\n    dom.addClass(icon, params.showClass.icon);\n  } else {\n    error(`Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"${params.icon}\"`);\n  }\n};\n\nconst hideAllIcons = () => {\n  const icons = dom.getIcons();\n\n  for (let i = 0; i < icons.length; i++) {\n    dom.hide(icons[i]);\n  }\n}; // Adjust success icon background color to match the popup background color\n\n\nconst adjustSuccessIconBackgoundColor = () => {\n  const popup = dom.getPopup();\n  const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\n  const successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\n\n  for (let i = 0; i < successIconParts.length; i++) {\n    successIconParts[i].style.backgroundColor = popupBackgroundColor;\n  }\n};\n\nconst setContent = (icon, params) => {\n  icon.innerHTML = '';\n\n  if (params.iconHtml) {\n    icon.innerHTML = iconContent(params.iconHtml);\n  } else if (params.icon === 'success') {\n    icon.innerHTML = `\n      <div class=\"swal2-success-circular-line-left\"></div>\n      <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n      <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n      <div class=\"swal2-success-circular-line-right\"></div>\n    `;\n  } else if (params.icon === 'error') {\n    icon.innerHTML = `\n      <span class=\"swal2-x-mark\">\n        <span class=\"swal2-x-mark-line-left\"></span>\n        <span class=\"swal2-x-mark-line-right\"></span>\n      </span>\n    `;\n  } else {\n    const defaultIconHtml = {\n      question: '?',\n      warning: '!',\n      info: 'i'\n    };\n    icon.innerHTML = iconContent(defaultIconHtml[params.icon]);\n  }\n};\n\nconst iconContent = content => `<div class=\"${swalClasses['icon-content']}\">${content}</div>`;","map":{"version":3,"sources":["/home/bmenezes/my-app/node_modules/sweetalert2/src/utils/dom/renderers/renderIcon.js"],"names":["swalClasses","iconTypes","error","dom","privateProps","renderIcon","instance","params","innerParams","get","icon","getIcon","applyCustomClass","hideAllIcons","Object","keys","indexOf","elementBySelector","show","setContent","adjustSuccessIconBackgoundColor","addClass","showClass","icons","getIcons","i","length","hide","popup","getPopup","popupBackgroundColor","window","getComputedStyle","getPropertyValue","successIconParts","querySelectorAll","style","backgroundColor","innerHTML","iconHtml","iconContent","defaultIconHtml","question","warning","info","content"],"mappings":"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","sourcesContent":["import { swalClasses, iconTypes } from '../../classes.js'\nimport { error } from '../../utils.js'\nimport * as dom from '../../dom/index.js'\nimport privateProps from '../../../privateProps.js'\n\nexport const renderIcon = (instance, params) => {\n  const innerParams = privateProps.innerParams.get(instance)\n\n  // if the give icon already rendered, apply the custom class without re-rendering the icon\n  if (innerParams && params.icon === innerParams.icon && dom.getIcon()) {\n    dom.applyCustomClass(dom.getIcon(), params, 'icon')\n    return\n  }\n\n  hideAllIcons()\n\n  if (!params.icon) {\n    return\n  }\n\n  if (Object.keys(iconTypes).indexOf(params.icon) !== -1) {\n    const icon = dom.elementBySelector(`.${swalClasses.icon}.${iconTypes[params.icon]}`)\n    dom.show(icon)\n\n    // Custom or default content\n    setContent(icon, params)\n    adjustSuccessIconBackgoundColor()\n\n    // Custom class\n    dom.applyCustomClass(icon, params, 'icon')\n\n    // Animate icon\n    dom.addClass(icon, params.showClass.icon)\n  } else {\n    error(`Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"${params.icon}\"`)\n  }\n}\n\nconst hideAllIcons = () => {\n  const icons = dom.getIcons()\n  for (let i = 0; i < icons.length; i++) {\n    dom.hide(icons[i])\n  }\n}\n\n// Adjust success icon background color to match the popup background color\nconst adjustSuccessIconBackgoundColor = () => {\n  const popup = dom.getPopup()\n  const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color')\n  const successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix')\n  for (let i = 0; i < successIconParts.length; i++) {\n    successIconParts[i].style.backgroundColor = popupBackgroundColor\n  }\n}\n\nconst setContent = (icon, params) => {\n  icon.innerHTML = ''\n\n  if (params.iconHtml) {\n    icon.innerHTML = iconContent(params.iconHtml)\n  } else if (params.icon === 'success') {\n    icon.innerHTML = `\n      <div class=\"swal2-success-circular-line-left\"></div>\n      <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n      <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n      <div class=\"swal2-success-circular-line-right\"></div>\n    `\n  } else if (params.icon === 'error') {\n    icon.innerHTML = `\n      <span class=\"swal2-x-mark\">\n        <span class=\"swal2-x-mark-line-left\"></span>\n        <span class=\"swal2-x-mark-line-right\"></span>\n      </span>\n    `\n  } else {\n    const defaultIconHtml = {\n      question: '?',\n      warning: '!',\n      info: 'i'\n    }\n    icon.innerHTML = iconContent(defaultIconHtml[params.icon])\n  }\n}\n\nconst iconContent = (content) => `<div class=\"${swalClasses['icon-content']}\">${content}</div>`\n"]},"metadata":{},"sourceType":"module"}